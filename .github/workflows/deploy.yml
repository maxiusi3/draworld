name: Deploy to Vercel

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
  VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}

jobs:
  # Run tests first
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [18.x]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
    
    - name: Install dependencies
      run: npm install --legacy-peer-deps
    
    - name: Run linting
      run: npm run lint
    
    - name: Run unit tests
      run: npm run test
      env:
        # Mock environment variables for tests
        NEXT_PUBLIC_FIREBASE_API_KEY: "test_api_key"
        NEXT_PUBLIC_FIREBASE_AUTH_DOMAIN: "test.firebaseapp.com"
        NEXT_PUBLIC_FIREBASE_PROJECT_ID: "test-project"
        NEXT_PUBLIC_FIREBASE_STORAGE_BUCKET: "test.appspot.com"
        NEXT_PUBLIC_FIREBASE_MESSAGING_SENDER_ID: "123456789"
        NEXT_PUBLIC_FIREBASE_APP_ID: "1:123456789:web:abcdef"
        NEXT_PUBLIC_RUNWARE_API_KEY: "test_runware_key"
        NEXT_PUBLIC_MOCK_PAYMENTS: "true"

  # Deploy to Vercel Preview (for PRs)
  deploy-preview:
    needs: test
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: 18.x
    
    - name: Install Vercel CLI
      run: npm install --global vercel@latest
    
    - name: Pull Vercel Environment Information
      run: vercel pull --yes --environment=preview --token=${{ secrets.VERCEL_TOKEN }}
    
    - name: Build Project Artifacts
      run: vercel build --token=${{ secrets.VERCEL_TOKEN }}
    
    - name: Deploy Project Artifacts to Vercel
      id: deploy
      run: |
        url=$(vercel deploy --prebuilt --token=${{ secrets.VERCEL_TOKEN }})
        echo "url=$url" >> $GITHUB_OUTPUT
    
    - name: Comment PR with preview URL
      uses: actions/github-script@v7
      with:
        script: |
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: '🚀 Preview deployment ready! \n\n🔗 **Preview URL:** ${{ steps.deploy.outputs.url }}\n\n✅ This deployment includes the console error fixes.'
          })

  # Deploy to Production (for main branch pushes)
  deploy-production:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: 18.x
    
    - name: Install Vercel CLI
      run: npm install --global vercel@latest
    
    - name: Pull Vercel Environment Information
      run: vercel pull --yes --environment=production --token=${{ secrets.VERCEL_TOKEN }}
    
    - name: Build Project Artifacts
      run: vercel build --prod --token=${{ secrets.VERCEL_TOKEN }}
    
    - name: Deploy Project Artifacts to Vercel
      id: deploy
      run: |
        url=$(vercel deploy --prebuilt --prod --token=${{ secrets.VERCEL_TOKEN }})
        echo "url=$url" >> $GITHUB_OUTPUT
    
    - name: Create deployment status
      uses: actions/github-script@v7
      with:
        script: |
          github.rest.repos.createCommitStatus({
            owner: context.repo.owner,
            repo: context.repo.repo,
            sha: context.sha,
            state: 'success',
            target_url: '${{ steps.deploy.outputs.url }}',
            description: 'Production deployment successful',
            context: 'vercel/production'
          })

  # Health check after production deployment
  health-check:
    needs: deploy-production
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
    - name: Wait for deployment
      run: sleep 30
    
    - name: Health check
      run: |
        response=$(curl -s -o /dev/null -w "%{http_code}" https://draworld-opal.vercel.app/)
        if [ $response -eq 200 ]; then
          echo "✅ Health check passed - site is responding"
        else
          echo "❌ Health check failed - HTTP $response"
          exit 1
        fi
    
    - name: Check for console errors
      uses: actions/setup-node@v4
      with:
        node-version: 18.x
    
    - name: Install Playwright
      run: |
        npm install playwright
        npx playwright install chromium
    
    - name: Check console errors
      run: |
        node -e "
        const { chromium } = require('playwright');
        (async () => {
          const browser = await chromium.launch();
          const page = await browser.newPage();
          const errors = [];
          
          page.on('console', msg => {
            if (msg.type() === 'error') {
              errors.push(msg.text());
            }
          });
          
          await page.goto('https://draworld-opal.vercel.app/');
          await page.waitForTimeout(3000);
          
          if (errors.length > 0) {
            console.log('❌ Console errors found:');
            errors.forEach(error => console.log('  - ' + error));
            process.exit(1);
          } else {
            console.log('✅ No console errors detected');
          }
          
          await browser.close();
        })();
        "